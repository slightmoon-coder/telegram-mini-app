import json
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from random import randint

TOKEN = "7588023257:AAGFtTg8bVsTpGWRP4zeCNsqlLvkySfmEA0"
ADMIN_IDS = [123456789]  # –¢–≤–æ–π Telegram ID —Å—é–¥–∞, —á—Ç–æ–±—ã –¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã

BALANCE_FILE = "balances.json"

def load_balances():
    if os.path.exists(BALANCE_FILE):
        with open(BALANCE_FILE, "r") as f:
            return json.load(f)
    return {}

def save_balances(balances):
    with open(BALANCE_FILE, "w") as f:
        json.dump(balances, f)

user_balances = load_balances()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å üéÅ", web_app=WebAppInfo("https://slightmoon-coder.github.io/telegram-mini-app/"))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –û—Ç–∫—Ä—ã–≤–∞–π –∫–µ–π—Å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º '–ø–æ–¥–∞—Ä–æ–∫', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –∏ –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å –≤—Ä—É—á–Ω—É—é.\n"
        "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å ‚Äî –≤–≤–µ–¥–∏ /balance\n–î–ª—è –ø–æ–º–æ—â–∏ ‚Äî /help", reply_markup=reply_markup)

async def gift_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    text = update.message.text.lower()
    if "–ø–æ–¥–∞—Ä–æ–∫" in text:
        user_balances[user_id] = user_balances.get(user_id, 0) + 1
        save_balances(user_balances)
        await update.message.reply_text("–ü–æ–¥–∞—Ä–æ–∫ –ø–æ–ª—É—á–µ–Ω! üéâ –ì–æ—Ç–æ–≤ –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å? –ù–∞–ø–∏—à–∏ /open –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")
    else:
        await update.message.reply_text("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫, –æ—Ç–ø—Ä–∞–≤—å —Å–ª–æ–≤–æ '–ø–æ–¥–∞—Ä–æ–∫'.")

async def open_case(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    balance = user_balances.get(user_id, 0)

    if balance < 1:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –ø–æ–¥–∞—Ä–æ–∫, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å.")
        return

    user_balances[user_id] = balance - 1
    save_balances(user_balances)

    outcome = randint(1, 100)
    if outcome <= 5:
        prize = "üî• –û–≥–Ω–µ–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ ($1.5)"
    elif outcome <= 30:
        prize = "üí∞ –ü–æ–¥–∞—Ä–æ–∫ –Ω–∞ $1.0"
    elif outcome <= 60:
        prize = "üì¶ –°—Ç–∏–∫–µ—Ä–ø–∞–∫ ($0.3)"
    else:
        prize = "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–∞–ª–æ üò¢"

    await update.message.reply_text(f"üéâ –¢—ã –æ—Ç–∫—Ä—ã–ª –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∏–ª: {prize}\n(–ü–æ–¥–∞—Ä–æ–∫ –±—É–¥–µ—Ç –≤—ã—Å–ª–∞–Ω –≤—Ä—É—á–Ω—É—é)")

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    balance = user_balances.get(user_id, 0)
    await update.message.reply_text(f"–£ —Ç–µ–±—è {balance} –ø–æ–¥–∞—Ä–∫–æ–≤.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –∫–Ω–æ–ø–∫–∞ –∫–µ–π—Å–∞\n"
        "/balance ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–¥–∞—Ä–∫–æ–≤\n"
        "/open ‚Äî –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å (—Ç—Ä–∞—Ç–∏—Ç –ø–æ–¥–∞—Ä–æ–∫)\n"
        "/addgift <user_id> <–∫–æ–ª-–≤–æ> ‚Äî (–∞–¥–º–∏–Ω) –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

async def addgift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        args = context.args
        if len(args) != 2:
            raise ValueError
        target_id = args[0]
        amount = int(args[1])
    except:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addgift <user_id> <–∫–æ–ª-–≤–æ>")
        return

    user_balances[target_id] = user_balances.get(target_id, 0) + amount
    save_balances(user_balances)
    await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}.")

app = ApplicationBuilder().token(TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("open", open_case))
app.add_handler(CommandHandler("balance", balance))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("addgift", addgift))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, gift_received))

app.run_polling()
